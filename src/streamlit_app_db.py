import streamlit as st
import pyodbc
import os
from dotenv import load_dotenv
import pandas as pd

# --- C·∫•u h√¨nh trang v√† T·∫£i bi·∫øn m√¥i tr∆∞·ªùng ---
st.set_page_config(layout="wide", page_title="L·ªãch Chi·∫øu Phim")
load_dotenv()

# --- T·ªëi ∆∞u k·∫øt n·ªëi v√† T·∫£i d·ªØ li·ªáu ---

# D√πng st.cache_resource ƒë·ªÉ t·∫°o k·∫øt n·ªëi DB m·ªôt l·∫ßn duy nh·∫•t v√† t√°i s·ª≠ d·ª•ng.
# ƒêi·ªÅu n√†y gi√∫p tƒÉng t·ªëc ƒë·ªô v√† tr√°nh m·ªü qu√° nhi·ªÅu k·∫øt n·ªëi kh√¥ng c·∫ßn thi·∫øt.
@st.cache_resource
def get_connection():
    """T·∫°o v√† cache k·∫øt n·ªëi ƒë·∫øn SQL Server."""
    server = os.getenv("SQL_SERVER")
    database = os.getenv("SQL_DB")
    username = os.getenv("SQL_USER")
    password = os.getenv("SQL_PASSWORD")
    
    conn_str = (
        f"DRIVER={{ODBC Driver 18 for SQL Server}};"
        f"SERVER={server};"
        f"DATABASE={database};"
        f"UID={username};"
        f"PWD={password};"
        f"TrustServerCertificate=yes;"
    )
    try:
        conn = pyodbc.connect(conn_str)
        return conn
    except pyodbc.Error as ex:
        st.error(f"L·ªói k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu! Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")
        st.exception(ex)
        return None

# D√πng st.cache_data ƒë·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ DB m·ªôt l·∫ßn v√† l∆∞u v√†o cache.
# L·∫ßn sau khi c·∫ßn d·ªØ li·ªáu, Streamlit s·∫Ω l·∫•y t·ª´ cache thay v√¨ query l·∫°i DB.
@st.cache_data
def load_data(_conn):
    """T·∫£i to√†n b·ªô d·ªØ li·ªáu l·ªãch chi·∫øu phim t·ª´ database."""
    if _conn:
        # Thay ƒë·ªïi t√™n b·∫£ng t·∫°i ƒë√¢y cho kh·ªõp v·ªõi database c·ªßa b·∫°n
        table_name = os.getenv("TABLE_NAME", "Movie_cgv") 
        query = f"SELECT * FROM dbo.{table_name}"
        df = pd.read_sql(query, _conn)
        return df
    return pd.DataFrame()

# --- Giao di·ªán ·ª©ng d·ª•ng ---
st.title("üé¨ L·ªãch Chi·∫øu Phim")

conn = get_connection()

if conn:
    df = load_data(conn)

    if df.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o trong database ho·∫∑c kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu.")
    else:
        # --- B·ªò L·ªåC ·ªû THANH B√äN (SIDEBAR) ---
        st.sidebar.header("B·ªô l·ªçc üîé")

        # 1. L·ªçc theo r·∫°p chi·∫øu phim
        # S·ª¨A L·ªñI: ƒê·ªïi 'Theater' th√†nh 'theater' (vi·∫øt th∆∞·ªùng)
        theaters = sorted(df['theater'].unique().tolist())
        # Th√™m t√πy ch·ªçn "T·∫•t c·∫£" v√†o ƒë·∫ßu danh s√°ch
        selected_theater = st.sidebar.selectbox(
            "Ch·ªçn r·∫°p:",
            options=["T·∫•t c·∫£"] + theaters
        )

        # 2. T√¨m ki·∫øm theo t√™n phim
        search_movie = st.sidebar.text_input("T√¨m ki·∫øm theo t√™n phim:")

        # --- X·ª≠ l√Ω l·ªçc d·ªØ li·ªáu ---
        # B·∫Øt ƒë·∫ßu v·ªõi DataFrame ƒë·∫ßy ƒë·ªß
        filtered_df = df

        # √Åp d·ª•ng b·ªô l·ªçc r·∫°p
        if selected_theater != "T·∫•t c·∫£":
            # S·ª¨A L·ªñI: ƒê·ªïi 'Theater' th√†nh 'theater' (vi·∫øt th∆∞·ªùng)
            filtered_df = filtered_df[filtered_df['theater'] == selected_theater]

        # √Åp d·ª•ng b·ªô l·ªçc t√¨m ki·∫øm t√™n phim
        if search_movie:
            # S·ª¨A L·ªñI: ƒê·ªïi 'NameMovie' th√†nh 'name_movie' (vi·∫øt th∆∞·ªùng)
            # .str.contains() ƒë·ªÉ t√¨m chu·ªói con, case=False ƒë·ªÉ kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
            filtered_df = filtered_df[filtered_df['name_movie'].str.contains(search_movie, case=False, na=False)]

        # --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
        st.subheader(f"T√¨m th·∫•y {len(filtered_df)} su·∫•t chi·∫øu")
        
        # Hi·ªÉn th·ªã DataFrame ƒë√£ ƒë∆∞·ª£c l·ªçc
        st.dataframe(filtered_df, use_container_width=True, hide_index=True)

